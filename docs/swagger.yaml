definitions:
  model.Task:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      duration:
        description: in minutes
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      passport_number:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      updated_at:
        type: string
    type: object
  v1.completeTaskResponse:
    properties:
      success:
        type: boolean
    type: object
  v1.createTaskInput:
    properties:
      description:
        type: string
      userId:
        type: integer
    required:
    - description
    - userId
    type: object
  v1.createTaskResponse:
    properties:
      id:
        type: integer
    type: object
  v1.createUserInput:
    properties:
      passportNumber:
        type: string
    required:
    - passportNumber
    type: object
  v1.createUserResponse:
    properties:
      id:
        type: integer
    type: object
  v1.deleteUserResponse:
    properties:
      success:
        type: boolean
    type: object
  v1.errorResponse:
    properties:
      message:
        type: string
      statusCode:
        type: integer
    type: object
  v1.updateUserInput:
    properties:
      address:
        type: string
      name:
        type: string
      passportNumber:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  v1.updateUserResponse:
    properties:
      success:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/v1/tasks:
    get:
      consumes:
      - application/json
      description: Task list
      parameters:
      - in: query
        name: dateFrom
        required: true
        type: string
      - in: query
        name: dateTo
        required: true
        type: string
      - in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Получение списка элементов "Задача"
      tags:
      - Tasks / Задачи
    post:
      consumes:
      - application/json
      description: Create Task
      parameters:
      - description: Task input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createTaskInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.createTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Создание элемента "Задача"
      tags:
      - Tasks / Задачи
  /api/v1/tasks/{id}:
    get:
      consumes:
      - application/json
      description: Get Task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Получение элемента "Задача"
      tags:
      - Tasks / Задачи
  /api/v1/tasks/{id}/complete:
    post:
      consumes:
      - application/json
      description: Complete specified task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.completeTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Завершение задачи
      tags:
      - Tasks / Задачи
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: User list
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - in: query
        name: offset
        type: integer
      - in: query
        name: passportNumber
        type: string
      - in: query
        name: patronymic
        type: string
      - in: query
        name: surname
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Получение списка элементов "Пользователь"
      tags:
      - Users / Пользователи
    post:
      consumes:
      - application/json
      description: User
      parameters:
      - description: User input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.createUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Создание элемента "Пользователь"
      tags:
      - Users / Пользователи
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.deleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Delete user
      tags:
      - Users / Пользователи
    get:
      consumes:
      - application/json
      description: Get User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Получение элемента "Пользователь"
      tags:
      - Users / Пользователи
    patch:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.updateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.updateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Update user
      tags:
      - Users / Пользователи
swagger: "2.0"
